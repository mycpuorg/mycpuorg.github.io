<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>memcpy_erms (1,038 samples, 0.05%)</title><rect x="16.5" y="357" width="0.6" height="15.0" fill="rgb(246,211,3)" rx="2" ry="2" />
<text  x="19.52" y="367.5" ></text>
</g>
<g >
<title>__open64 (10,746 samples, 0.48%)</title><rect x="11.7" y="389" width="5.6" height="15.0" fill="rgb(229,94,34)" rx="2" ry="2" />
<text  x="14.71" y="399.5" ></text>
</g>
<g >
<title>_nv040183rm (1,765 samples, 0.08%)</title><rect x="45.4" y="405" width="0.9" height="15.0" fill="rgb(229,184,3)" rx="2" ry="2" />
<text  x="48.36" y="415.5" ></text>
</g>
<g >
<title>_nv032887rm (2,353 samples, 0.10%)</title><rect x="13.8" y="373" width="1.3" height="15.0" fill="rgb(207,222,0)" rx="2" ry="2" />
<text  x="16.83" y="383.5" ></text>
</g>
<g >
<title>__libc_start_main (1,568 samples, 0.07%)</title><rect x="10.4" y="405" width="0.8" height="15.0" fill="rgb(208,163,53)" rx="2" ry="2" />
<text  x="13.40" y="415.5" ></text>
</g>
<g >
<title>os_release_spinlock (1,327 samples, 0.06%)</title><rect x="45.6" y="389" width="0.7" height="15.0" fill="rgb(210,89,25)" rx="2" ry="2" />
<text  x="48.59" y="399.5" ></text>
</g>
<g >
<title>_nv040494rm (1,038 samples, 0.05%)</title><rect x="16.5" y="373" width="0.6" height="15.0" fill="rgb(234,150,26)" rx="2" ry="2" />
<text  x="19.52" y="383.5" ></text>
</g>
<g >
<title>kthread (345 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(219,117,33)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (379 samples, 0.02%)</title><rect x="46.4" y="405" width="0.2" height="15.0" fill="rgb(250,143,41)" rx="2" ry="2" />
<text  x="49.40" y="415.5" ></text>
</g>
<g >
<title>memset_erms (374 samples, 0.02%)</title><rect x="16.1" y="357" width="0.2" height="15.0" fill="rgb(235,107,51)" rx="2" ry="2" />
<text  x="19.10" y="367.5" ></text>
</g>
<g >
<title>service_batch_managed_faults_in_block_locked (240 samples, 0.01%)</title><rect x="10.0" y="293" width="0.1" height="15.0" fill="rgb(238,104,18)" rx="2" ry="2" />
<text  x="13.02" y="303.5" ></text>
</g>
<g >
<title>main (1,568 samples, 0.07%)</title><rect x="10.4" y="389" width="0.8" height="15.0" fill="rgb(244,78,16)" rx="2" ry="2" />
<text  x="13.40" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,298 samples, 0.06%)</title><rect x="10.5" y="277" width="0.7" height="15.0" fill="rgb(229,194,12)" rx="2" ry="2" />
<text  x="13.53" y="287.5" ></text>
</g>
<g >
<title>memcpy_erms (199 samples, 0.01%)</title><rect x="16.0" y="357" width="0.1" height="15.0" fill="rgb(227,202,18)" rx="2" ry="2" />
<text  x="18.99" y="367.5" ></text>
</g>
<g >
<title>__GI___ioctl (890 samples, 0.04%)</title><rect x="38.7" y="405" width="0.4" height="15.0" fill="rgb(248,185,42)" rx="2" ry="2" />
<text  x="41.68" y="415.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1,242 samples, 0.05%)</title><rect x="10.5" y="165" width="0.7" height="15.0" fill="rgb(245,103,31)" rx="2" ry="2" />
<text  x="13.55" y="175.5" ></text>
</g>
<g >
<title>start_secondary (2,107,211 samples, 93.24%)</title><rect x="50.1" y="389" width="1100.3" height="15.0" fill="rgb(214,30,30)" rx="2" ry="2" />
<text  x="53.13" y="399.5" >start_secondary</text>
</g>
<g >
<title>alloc_pages_current (211 samples, 0.01%)</title><rect x="10.7" y="69" width="0.1" height="15.0" fill="rgb(215,118,45)" rx="2" ry="2" />
<text  x="13.71" y="79.5" ></text>
</g>
<g >
<title>all (2,259,879 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(248,81,28)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>do_idle (2,107,209 samples, 93.24%)</title><rect x="50.1" y="357" width="1100.3" height="15.0" fill="rgb(238,66,13)" rx="2" ry="2" />
<text  x="53.13" y="367.5" >do_idle</text>
</g>
<g >
<title>clear_page_erms (271 samples, 0.01%)</title><rect x="47.1" y="101" width="0.2" height="15.0" fill="rgb(210,120,12)" rx="2" ry="2" />
<text  x="50.12" y="111.5" ></text>
</g>
<g >
<title>_nv032845rm (585 samples, 0.03%)</title><rect x="38.8" y="389" width="0.3" height="15.0" fill="rgb(252,52,50)" rx="2" ry="2" />
<text  x="41.77" y="399.5" ></text>
</g>
<g >
<title>_nv029173rm (1,350 samples, 0.06%)</title><rect x="13.0" y="373" width="0.7" height="15.0" fill="rgb(233,125,30)" rx="2" ry="2" />
<text  x="16.03" y="383.5" ></text>
</g>
<g >
<title>block_populate_pages (468 samples, 0.02%)</title><rect x="47.0" y="181" width="0.3" height="15.0" fill="rgb(222,192,2)" rx="2" ry="2" />
<text  x="50.03" y="191.5" ></text>
</g>
<g >
<title>uvm_va_block_cpu_fault (565 samples, 0.03%)</title><rect x="47.0" y="245" width="0.3" height="15.0" fill="rgb(217,165,2)" rx="2" ry="2" />
<text  x="50.02" y="255.5" ></text>
</g>
<g >
<title>perf_mmap__push (1,413 samples, 0.06%)</title><rect x="10.5" y="325" width="0.7" height="15.0" fill="rgb(253,105,52)" rx="2" ry="2" />
<text  x="13.47" y="335.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (75,740 samples, 3.35%)</title><rect x="1150.4" y="373" width="39.6" height="15.0" fill="rgb(212,46,49)" rx="2" ry="2" />
<text  x="1153.41" y="383.5" >x86..</text>
</g>
<g >
<title>__vdso_clock_gettime (377 samples, 0.02%)</title><rect x="46.4" y="389" width="0.2" height="15.0" fill="rgb(237,180,50)" rx="2" ry="2" />
<text  x="49.40" y="399.5" ></text>
</g>
<g >
<title>__random_r (1,148 samples, 0.05%)</title><rect x="43.3" y="405" width="0.6" height="15.0" fill="rgb(240,38,46)" rx="2" ry="2" />
<text  x="46.30" y="415.5" ></text>
</g>
<g >
<title>_nv000242rm (304 samples, 0.01%)</title><rect x="11.8" y="373" width="0.2" height="15.0" fill="rgb(219,125,1)" rx="2" ry="2" />
<text  x="14.82" y="383.5" ></text>
</g>
<g >
<title>uvm_va_block_make_resident (474 samples, 0.02%)</title><rect x="47.0" y="197" width="0.3" height="15.0" fill="rgb(230,83,19)" rx="2" ry="2" />
<text  x="50.03" y="207.5" ></text>
</g>
<g >
<title>cpuidle_enter (75,740 samples, 3.35%)</title><rect x="1150.4" y="261" width="39.6" height="15.0" fill="rgb(205,23,2)" rx="2" ry="2" />
<text  x="1153.41" y="271.5" >cpu..</text>
</g>
<g >
<title>asm_exc_page_fault (577 samples, 0.03%)</title><rect x="47.0" y="389" width="0.3" height="15.0" fill="rgb(229,78,42)" rx="2" ry="2" />
<text  x="50.02" y="399.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2,107,211 samples, 93.24%)</title><rect x="50.1" y="373" width="1100.3" height="15.0" fill="rgb(252,64,43)" rx="2" ry="2" />
<text  x="53.13" y="383.5" >cpu_startup_entry</text>
</g>
<g >
<title>handle_mm_fault (576 samples, 0.03%)</title><rect x="47.0" y="341" width="0.3" height="15.0" fill="rgb(209,125,14)" rx="2" ry="2" />
<text  x="50.02" y="351.5" ></text>
</g>
<g >
<title>memcpy_erms (217 samples, 0.01%)</title><rect x="17.1" y="357" width="0.1" height="15.0" fill="rgb(206,82,19)" rx="2" ry="2" />
<text  x="20.07" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,293 samples, 0.06%)</title><rect x="10.5" y="261" width="0.7" height="15.0" fill="rgb(227,56,20)" rx="2" ry="2" />
<text  x="13.53" y="271.5" ></text>
</g>
<g >
<title>cmd_record (1,568 samples, 0.07%)</title><rect x="10.4" y="357" width="0.8" height="15.0" fill="rgb(239,100,0)" rx="2" ry="2" />
<text  x="13.40" y="367.5" ></text>
</g>
<g >
<title>_set_pages_array (477 samples, 0.02%)</title><rect x="38.8" y="325" width="0.3" height="15.0" fill="rgb(226,179,19)" rx="2" ry="2" />
<text  x="41.82" y="335.5" ></text>
</g>
<g >
<title>nv_queue (209 samples, 0.01%)</title><rect x="10.3" y="421" width="0.1" height="15.0" fill="rgb(246,85,41)" rx="2" ry="2" />
<text  x="13.29" y="431.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (465 samples, 0.02%)</title><rect x="10.7" y="117" width="0.2" height="15.0" fill="rgb(246,66,45)" rx="2" ry="2" />
<text  x="13.70" y="127.5" ></text>
</g>
<g >
<title>sortesh_gpu (74,240 samples, 3.29%)</title><rect x="11.2" y="421" width="38.8" height="15.0" fill="rgb(239,198,35)" rx="2" ry="2" />
<text  x="14.22" y="431.5" >sor..</text>
</g>
<g >
<title>ext4_da_write_begin (672 samples, 0.03%)</title><rect x="10.6" y="133" width="0.3" height="15.0" fill="rgb(238,193,52)" rx="2" ry="2" />
<text  x="13.59" y="143.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (213 samples, 0.01%)</title><rect x="10.8" y="85" width="0.1" height="15.0" fill="rgb(235,76,22)" rx="2" ry="2" />
<text  x="13.82" y="95.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (75,740 samples, 3.35%)</title><rect x="1150.4" y="389" width="39.6" height="15.0" fill="rgb(243,85,14)" rx="2" ry="2" />
<text  x="1153.41" y="399.5" >x86..</text>
</g>
<g >
<title>do_idle (75,740 samples, 3.35%)</title><rect x="1150.4" y="293" width="39.6" height="15.0" fill="rgb(225,82,53)" rx="2" ry="2" />
<text  x="1153.41" y="303.5" >do_..</text>
</g>
<g >
<title>_nv040812rm (432 samples, 0.02%)</title><rect x="17.1" y="373" width="0.2" height="15.0" fill="rgb(207,210,33)" rx="2" ry="2" />
<text  x="20.07" y="383.5" ></text>
</g>
<g >
<title>vfs_write (1,263 samples, 0.06%)</title><rect x="10.5" y="213" width="0.7" height="15.0" fill="rgb(217,197,53)" rx="2" ry="2" />
<text  x="13.54" y="223.5" ></text>
</g>
<g >
<title>__do_fault (574 samples, 0.03%)</title><rect x="47.0" y="293" width="0.3" height="15.0" fill="rgb(248,55,37)" rx="2" ry="2" />
<text  x="50.02" y="303.5" ></text>
</g>
<g >
<title>swapper (2,182,951 samples, 96.60%)</title><rect x="50.1" y="421" width="1139.9" height="15.0" fill="rgb(211,19,4)" rx="2" ry="2" />
<text  x="53.13" y="431.5" >swapper</text>
</g>
<g >
<title>ext4_file_write_iter (1,246 samples, 0.06%)</title><rect x="10.5" y="181" width="0.7" height="15.0" fill="rgb(216,14,4)" rx="2" ry="2" />
<text  x="13.54" y="191.5" ></text>
</g>
<g >
<title>__x86_retpoline_rax (203 samples, 0.01%)</title><rect x="11.7" y="373" width="0.1" height="15.0" fill="rgb(220,200,35)" rx="2" ry="2" />
<text  x="14.72" y="383.5" ></text>
</g>
<g >
<title>service_fault_batch (242 samples, 0.01%)</title><rect x="10.0" y="309" width="0.1" height="15.0" fill="rgb(243,105,38)" rx="2" ry="2" />
<text  x="13.02" y="319.5" ></text>
</g>
<g >
<title>_nv032891rm (1,270 samples, 0.06%)</title><rect x="15.1" y="373" width="0.6" height="15.0" fill="rgb(205,67,28)" rx="2" ry="2" />
<text  x="18.07" y="383.5" ></text>
</g>
<g >
<title>native_safe_halt (2,107,181 samples, 93.24%)</title><rect x="50.1" y="277" width="1100.3" height="15.0" fill="rgb(213,114,15)" rx="2" ry="2" />
<text  x="53.14" y="287.5" >native_safe_halt</text>
</g>
<g >
<title>__lock_text_start (1,316 samples, 0.06%)</title><rect x="45.6" y="373" width="0.7" height="15.0" fill="rgb(209,205,43)" rx="2" ry="2" />
<text  x="48.59" y="383.5" ></text>
</g>
<g >
<title>uvm_gpu_service_replayable_faults (344 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(248,93,49)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>ksys_write (1,279 samples, 0.06%)</title><rect x="10.5" y="229" width="0.7" height="15.0" fill="rgb(247,215,21)" rx="2" ry="2" />
<text  x="13.53" y="239.5" ></text>
</g>
<g >
<title>exc_page_fault (577 samples, 0.03%)</title><rect x="47.0" y="373" width="0.3" height="15.0" fill="rgb(251,6,36)" rx="2" ry="2" />
<text  x="50.02" y="383.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (238 samples, 0.01%)</title><rect x="11.0" y="101" width="0.1" height="15.0" fill="rgb(245,66,7)" rx="2" ry="2" />
<text  x="13.96" y="111.5" ></text>
</g>
<g >
<title>acpi_idle_enter (2,107,181 samples, 93.24%)</title><rect x="50.1" y="293" width="1100.3" height="15.0" fill="rgb(224,104,6)" rx="2" ry="2" />
<text  x="53.14" y="303.5" >acpi_idle_enter</text>
</g>
<g >
<title>_nv034521rm (222 samples, 0.01%)</title><rect x="15.8" y="373" width="0.1" height="15.0" fill="rgb(231,89,43)" rx="2" ry="2" />
<text  x="18.82" y="383.5" ></text>
</g>
<g >
<title>_nv035355rm (573 samples, 0.03%)</title><rect x="16.0" y="373" width="0.3" height="15.0" fill="rgb(211,212,40)" rx="2" ry="2" />
<text  x="18.99" y="383.5" ></text>
</g>
<g >
<title>record__pushfn (1,385 samples, 0.06%)</title><rect x="10.5" y="309" width="0.7" height="15.0" fill="rgb(207,124,27)" rx="2" ry="2" />
<text  x="13.49" y="319.5" ></text>
</g>
<g >
<title>set_pages_array_uc (477 samples, 0.02%)</title><rect x="38.8" y="341" width="0.3" height="15.0" fill="rgb(215,40,3)" rx="2" ry="2" />
<text  x="41.82" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (208 samples, 0.01%)</title><rect x="10.7" y="53" width="0.1" height="15.0" fill="rgb(235,102,13)" rx="2" ry="2" />
<text  x="13.71" y="63.5" ></text>
</g>
<g >
<title>arch_call_rest_init (75,740 samples, 3.35%)</title><rect x="1150.4" y="341" width="39.6" height="15.0" fill="rgb(252,5,14)" rx="2" ry="2" />
<text  x="1153.41" y="351.5" >arc..</text>
</g>
<g >
<title>memset_erms (215 samples, 0.01%)</title><rect x="17.2" y="357" width="0.1" height="15.0" fill="rgb(227,73,0)" rx="2" ry="2" />
<text  x="20.18" y="367.5" ></text>
</g>
<g >
<title>__page_cache_alloc (213 samples, 0.01%)</title><rect x="10.7" y="85" width="0.1" height="15.0" fill="rgb(213,122,52)" rx="2" ry="2" />
<text  x="13.71" y="95.5" ></text>
</g>
<g >
<title>run_builtin (1,568 samples, 0.07%)</title><rect x="10.4" y="373" width="0.8" height="15.0" fill="rgb(242,210,10)" rx="2" ry="2" />
<text  x="13.40" y="383.5" ></text>
</g>
<g >
<title>_nv032924rm (414 samples, 0.02%)</title><rect x="44.8" y="405" width="0.2" height="15.0" fill="rgb(231,18,11)" rx="2" ry="2" />
<text  x="47.80" y="415.5" ></text>
</g>
<g >
<title>block_cpu_fault_locked (565 samples, 0.03%)</title><rect x="47.0" y="229" width="0.3" height="15.0" fill="rgb(229,79,52)" rx="2" ry="2" />
<text  x="50.02" y="239.5" ></text>
</g>
<g >
<title>get_page_from_freelist (205 samples, 0.01%)</title><rect x="10.7" y="37" width="0.1" height="15.0" fill="rgb(221,164,18)" rx="2" ry="2" />
<text  x="13.71" y="47.5" ></text>
</g>
<g >
<title>acpi_idle_enter (75,740 samples, 3.35%)</title><rect x="1150.4" y="229" width="39.6" height="15.0" fill="rgb(253,228,11)" rx="2" ry="2" />
<text  x="1153.41" y="239.5" >acp..</text>
</g>
<g >
<title>__GI___ioctl (649 samples, 0.03%)</title><rect x="11.3" y="389" width="0.3" height="15.0" fill="rgb(231,73,6)" rx="2" ry="2" />
<text  x="14.30" y="399.5" ></text>
</g>
<g >
<title>start_kernel (75,740 samples, 3.35%)</title><rect x="1150.4" y="357" width="39.6" height="15.0" fill="rgb(240,221,54)" rx="2" ry="2" />
<text  x="1153.41" y="367.5" >sta..</text>
</g>
<g >
<title>__ext4_mark_inode_dirty (218 samples, 0.01%)</title><rect x="11.0" y="69" width="0.1" height="15.0" fill="rgb(237,145,28)" rx="2" ry="2" />
<text  x="13.97" y="79.5" ></text>
</g>
<g >
<title>uvm_vm_fault_wrapper_entry (573 samples, 0.03%)</title><rect x="47.0" y="277" width="0.3" height="15.0" fill="rgb(241,223,22)" rx="2" ry="2" />
<text  x="50.02" y="287.5" ></text>
</g>
<g >
<title>generic_write_end (321 samples, 0.01%)</title><rect x="11.0" y="117" width="0.1" height="15.0" fill="rgb(238,123,2)" rx="2" ry="2" />
<text  x="13.96" y="127.5" ></text>
</g>
<g >
<title>nv_alloc_pages (585 samples, 0.03%)</title><rect x="38.8" y="373" width="0.3" height="15.0" fill="rgb(205,111,40)" rx="2" ry="2" />
<text  x="41.77" y="383.5" ></text>
</g>
<g >
<title>nv_alloc_system_pages (581 samples, 0.03%)</title><rect x="38.8" y="357" width="0.3" height="15.0" fill="rgb(206,53,16)" rx="2" ry="2" />
<text  x="41.77" y="367.5" ></text>
</g>
<g >
<title>memset_erms (1,350 samples, 0.06%)</title><rect x="13.0" y="357" width="0.7" height="15.0" fill="rgb(205,183,21)" rx="2" ry="2" />
<text  x="16.03" y="367.5" ></text>
</g>
<g >
<title>__random (7,949 samples, 0.35%)</title><rect x="39.1" y="405" width="4.2" height="15.0" fill="rgb(220,52,31)" rx="2" ry="2" />
<text  x="42.15" y="415.5" ></text>
</g>
<g >
<title>replayable_faults_isr_bottom_half (344 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(242,108,30)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,279 samples, 0.06%)</title><rect x="10.5" y="245" width="0.7" height="15.0" fill="rgb(226,205,30)" rx="2" ry="2" />
<text  x="13.53" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (299 samples, 0.01%)</title><rect x="47.1" y="133" width="0.2" height="15.0" fill="rgb(243,21,42)" rx="2" ry="2" />
<text  x="50.12" y="143.5" ></text>
</g>
<g >
<title>block_populate_page_cpu (459 samples, 0.02%)</title><rect x="47.0" y="165" width="0.3" height="15.0" fill="rgb(213,166,29)" rx="2" ry="2" />
<text  x="50.04" y="175.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (2,182,951 samples, 96.60%)</title><rect x="50.1" y="405" width="1139.9" height="15.0" fill="rgb(228,178,18)" rx="2" ry="2" />
<text  x="53.13" y="415.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>record__mmap_read_evlist.constprop.0 (1,446 samples, 0.06%)</title><rect x="10.5" y="341" width="0.7" height="15.0" fill="rgb(218,19,25)" rx="2" ry="2" />
<text  x="13.47" y="351.5" ></text>
</g>
<g >
<title>cpa_flush (437 samples, 0.02%)</title><rect x="38.8" y="293" width="0.3" height="15.0" fill="rgb(206,96,16)" rx="2" ry="2" />
<text  x="41.83" y="303.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (40,890 samples, 1.81%)</title><rect x="17.3" y="389" width="21.4" height="15.0" fill="rgb(226,100,33)" rx="2" ry="2" />
<text  x="20.33" y="399.5" >s..</text>
</g>
<g >
<title>rest_init (75,740 samples, 3.35%)</title><rect x="1150.4" y="325" width="39.6" height="15.0" fill="rgb(237,149,24)" rx="2" ry="2" />
<text  x="1153.41" y="335.5" >res..</text>
</g>
<g >
<title>call_cpuidle (2,107,188 samples, 93.24%)</title><rect x="50.1" y="341" width="1100.3" height="15.0" fill="rgb(235,3,44)" rx="2" ry="2" />
<text  x="53.13" y="351.5" >call_cpuidle</text>
</g>
<g >
<title>uvm_vm_fault.isra.0 (573 samples, 0.03%)</title><rect x="47.0" y="261" width="0.3" height="15.0" fill="rgb(211,47,42)" rx="2" ry="2" />
<text  x="50.02" y="271.5" ></text>
</g>
<g >
<title>cpuidle_enter (2,107,188 samples, 93.24%)</title><rect x="50.1" y="325" width="1100.3" height="15.0" fill="rgb(212,127,5)" rx="2" ry="2" />
<text  x="53.13" y="335.5" >cpuidle_enter</text>
</g>
<g >
<title>pagecache_get_page (465 samples, 0.02%)</title><rect x="10.7" y="101" width="0.2" height="15.0" fill="rgb(220,114,36)" rx="2" ry="2" />
<text  x="13.70" y="111.5" ></text>
</g>
<g >
<title>new_sync_write (1,247 samples, 0.06%)</title><rect x="10.5" y="197" width="0.7" height="15.0" fill="rgb(231,111,40)" rx="2" ry="2" />
<text  x="13.54" y="207.5" ></text>
</g>
<g >
<title>do_fault (574 samples, 0.03%)</title><rect x="47.0" y="309" width="0.3" height="15.0" fill="rgb(237,91,51)" rx="2" ry="2" />
<text  x="50.02" y="319.5" ></text>
</g>
<g >
<title>main (1,217 samples, 0.05%)</title><rect x="46.7" y="405" width="0.6" height="15.0" fill="rgb(245,83,15)" rx="2" ry="2" />
<text  x="49.68" y="415.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (233 samples, 0.01%)</title><rect x="11.0" y="85" width="0.1" height="15.0" fill="rgb(214,66,28)" rx="2" ry="2" />
<text  x="13.96" y="95.5" ></text>
</g>
<g >
<title>perf (1,568 samples, 0.07%)</title><rect x="10.4" y="421" width="0.8" height="15.0" fill="rgb(247,183,35)" rx="2" ry="2" />
<text  x="13.40" y="431.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (2,107,188 samples, 93.24%)</title><rect x="50.1" y="309" width="1100.3" height="15.0" fill="rgb(251,88,49)" rx="2" ry="2" />
<text  x="53.13" y="319.5" >cpuidle_enter_state</text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (4,624 samples, 0.20%)</title><rect x="47.6" y="405" width="2.4" height="15.0" fill="rgb(205,190,8)" rx="2" ry="2" />
<text  x="50.57" y="415.5" ></text>
</g>
<g >
<title>__libc_write (1,376 samples, 0.06%)</title><rect x="10.5" y="293" width="0.7" height="15.0" fill="rgb(249,196,17)" rx="2" ry="2" />
<text  x="13.49" y="303.5" ></text>
</g>
<g >
<title>native_safe_halt (75,740 samples, 3.35%)</title><rect x="1150.4" y="213" width="39.6" height="15.0" fill="rgb(254,148,36)" rx="2" ry="2" />
<text  x="1153.41" y="223.5" >nat..</text>
</g>
<g >
<title>get_page_from_freelist (292 samples, 0.01%)</title><rect x="47.1" y="117" width="0.2" height="15.0" fill="rgb(220,104,21)" rx="2" ry="2" />
<text  x="50.12" y="127.5" ></text>
</g>
<g >
<title>os_get_current_tick (212 samples, 0.01%)</title><rect x="44.9" y="389" width="0.1" height="15.0" fill="rgb(224,45,29)" rx="2" ry="2" />
<text  x="47.91" y="399.5" ></text>
</g>
<g >
<title>do_user_addr_fault (577 samples, 0.03%)</title><rect x="47.0" y="357" width="0.3" height="15.0" fill="rgb(217,201,17)" rx="2" ry="2" />
<text  x="50.02" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_current (306 samples, 0.01%)</title><rect x="47.1" y="149" width="0.2" height="15.0" fill="rgb(212,191,28)" rx="2" ry="2" />
<text  x="50.12" y="159.5" ></text>
</g>
<g >
<title>cpu_startup_entry (75,740 samples, 3.35%)</title><rect x="1150.4" y="309" width="39.6" height="15.0" fill="rgb(238,56,26)" rx="2" ry="2" />
<text  x="1153.41" y="319.5" >cpu..</text>
</g>
<g >
<title>sshd (257 samples, 0.01%)</title><rect x="50.0" y="421" width="0.1" height="15.0" fill="rgb(244,143,27)" rx="2" ry="2" />
<text  x="52.99" y="431.5" ></text>
</g>
<g >
<title>_main_loop (345 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(218,7,2)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>uvm_va_block_service_locked (232 samples, 0.01%)</title><rect x="10.0" y="277" width="0.1" height="15.0" fill="rgb(234,24,52)" rx="2" ry="2" />
<text  x="13.02" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (574 samples, 0.03%)</title><rect x="47.0" y="325" width="0.3" height="15.0" fill="rgb(254,43,31)" rx="2" ry="2" />
<text  x="50.02" y="335.5" ></text>
</g>
<g >
<title>call_cpuidle (75,740 samples, 3.35%)</title><rect x="1150.4" y="277" width="39.6" height="15.0" fill="rgb(251,86,35)" rx="2" ry="2" />
<text  x="1153.41" y="287.5" >cal..</text>
</g>
<g >
<title>change_page_attr_set_clr (469 samples, 0.02%)</title><rect x="38.8" y="309" width="0.3" height="15.0" fill="rgb(254,1,13)" rx="2" ry="2" />
<text  x="41.82" y="319.5" ></text>
</g>
<g >
<title>UVM_GPU1_BH (348 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(244,18,35)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>ret_from_fork (345 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(249,17,18)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (75,740 samples, 3.35%)</title><rect x="1150.4" y="245" width="39.6" height="15.0" fill="rgb(235,165,38)" rx="2" ry="2" />
<text  x="1153.41" y="255.5" >cpu..</text>
</g>
<g >
<title>ext4_da_write_end (360 samples, 0.02%)</title><rect x="10.9" y="133" width="0.2" height="15.0" fill="rgb(249,88,0)" rx="2" ry="2" />
<text  x="13.94" y="143.5" ></text>
</g>
<g >
<title>replayable_faults_isr_bottom_half_entry (344 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(214,106,25)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>uvm_va_block_service_locked (561 samples, 0.02%)</title><rect x="47.0" y="213" width="0.3" height="15.0" fill="rgb(222,137,34)" rx="2" ry="2" />
<text  x="50.02" y="223.5" ></text>
</g>
<g >
<title>[unknown] (52,512 samples, 2.32%)</title><rect x="11.3" y="405" width="27.4" height="15.0" fill="rgb(252,216,14)" rx="2" ry="2" />
<text  x="14.26" y="415.5" >[..</text>
</g>
<g >
<title>generic_perform_write (1,232 samples, 0.05%)</title><rect x="10.6" y="149" width="0.6" height="15.0" fill="rgb(234,212,31)" rx="2" ry="2" />
<text  x="13.55" y="159.5" ></text>
</g>
</g>
</svg>
